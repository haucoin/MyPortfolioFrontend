{"ast":null,"code":"var _jsxFileName = \"/Users/hollandaucoin/vscode-workspace/workspace-CST452/hollandaucoin/src/components/IntroductionSkills.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Container, Box, Typography, Grid, Button, Paper } from '@material-ui/core';\nimport service from '../services/SkillService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Code, Timeline, Web, ViewColumn, ArrowRightAlt } from '@material-ui/icons';\nimport theme from '../theme/theme';\n/**\n * MyPortfolio\n * @Author Holland Aucoin\n * \n * Introduction Skills\n * @Summary This component displays an introduction to the skills gained that is shown on the home page\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  icon: {\n    marginBottom: theme.spacing(1)\n  }\n}));\nexport default function App() {\n  _s();\n\n  // Creating variables of skill lists to be filled be appropriate service call\n  const [languageSkills, setLanguages] = React.useState([]);\n  const [SDSkills, setSD] = React.useState([]);\n  const [frameworkSkills, setFrameworks] = React.useState([]);\n  const [agileSkills, setAgile] = React.useState([]); // Use useEffect method to call backend for each skill type and wait for response\n\n  useEffect(() => {\n    service.getSkillsByType(\"Languages\").then(response => {\n      setLanguages(response.data);\n    });\n    service.getSkillsByType(\"Software Design\").then(response => {\n      setSD(response.data);\n    });\n    service.getSkillsByType(\"Web Frameworks\").then(response => {\n      setFrameworks(response.data);\n    });\n    service.getSkillsByType(\"Agile Scrum\").then(response => {\n      setAgile(response.data);\n    });\n  }, []); // Iterate through an array of technologies and turn it into string\n\n  function arrayToString(skillsArray) {\n    let string = \"\";\n    skillsArray.map((skill, index) => string += skill.name + (index < skillsArray.length - 1 ? ' â€¢\\u00A0' : ' '));\n    return string;\n  } // Set strings for each type of skill by calling method\n\n\n  let languages = arrayToString(languageSkills);\n  let SDs = arrayToString(SDSkills);\n  let frameworks = arrayToString(frameworkSkills);\n  let agiles = arrayToString(agileSkills);\n  const classes = useStyles(); // Create arrays for the strings of skills, titles, and icons to iterate over and show in boxes\n\n  let skills = [languages, frameworks, agiles];\n  let titles = [\"Languages\", \"Web Frameworks\", \"Agile Scrum\"];\n  let icons = [/*#__PURE__*/_jsxDEV(Code, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Web, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ViewColumn, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Timeline, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          pt: 6,\n          pb: 4,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            align: \"center\",\n            style: {\n              paddingBottom: \"25px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: \"Skills & Expertise\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n              width: \"100px\",\n              align: \"center\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 4,\n            style: {\n              justifyContent: \"center\"\n            },\n            children: skills.map((skill, id) => /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              md: 4,\n              style: {\n                textAlign: \"center\"\n              },\n              children: [icons[id], /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                component: \"h3\",\n                gutterBottom: true,\n                children: titles[id]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                component: \"p\",\n                children: skill\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 23\n              }, this)]\n            }, id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mb: 4,\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            href: \"/education\",\n            color: \"primary\",\n            endIcon: /*#__PURE__*/_jsxDEV(ArrowRightAlt, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 66\n            }, this),\n            children: \"See more\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"plNxQBNIlFTDUsxctHDQbtIZa0c=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hollandaucoin/vscode-workspace/workspace-CST452/hollandaucoin/src/components/IntroductionSkills.js"],"names":["React","useEffect","Container","Box","Typography","Grid","Button","Paper","service","makeStyles","Code","Timeline","Web","ViewColumn","ArrowRightAlt","theme","useStyles","icon","marginBottom","spacing","App","languageSkills","setLanguages","useState","SDSkills","setSD","frameworkSkills","setFrameworks","agileSkills","setAgile","getSkillsByType","then","response","data","arrayToString","skillsArray","string","map","skill","index","name","length","languages","SDs","frameworks","agiles","classes","skills","titles","icons","paddingBottom","justifyContent","id","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Container, Box, Typography, Grid, Button, Paper } from '@material-ui/core';\nimport service from '../services/SkillService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Code, Timeline, Web, ViewColumn, ArrowRightAlt } from '@material-ui/icons';\nimport theme from '../theme/theme';\n\n/**\n * MyPortfolio\n * @Author Holland Aucoin\n * \n * Introduction Skills\n * @Summary This component displays an introduction to the skills gained that is shown on the home page\n */\n\nconst useStyles = makeStyles(() => ({\n  icon: {\n    marginBottom: theme.spacing(1),\n  }\n}));\n\nexport default function App() {\n\n  // Creating variables of skill lists to be filled be appropriate service call\n  const [languageSkills, setLanguages] = React.useState([]);\n  const [SDSkills, setSD] = React.useState([]);\n  const [frameworkSkills, setFrameworks] = React.useState([]);\n  const [agileSkills, setAgile] = React.useState([]);\n\n  // Use useEffect method to call backend for each skill type and wait for response\n  useEffect(() => {\n    service.getSkillsByType(\"Languages\").then(response => {\n      setLanguages(response.data);\n    })\n    service.getSkillsByType(\"Software Design\").then(response => {\n      setSD(response.data);\n    })\n    service.getSkillsByType(\"Web Frameworks\").then(response => {\n      setFrameworks(response.data);\n    })\n    service.getSkillsByType(\"Agile Scrum\").then(response => {\n      setAgile(response.data);\n    })\n  }, []);\n\n  // Iterate through an array of technologies and turn it into string\n  function arrayToString(skillsArray) {\n    let string = \"\";\n\n    skillsArray.map((skill, index) => (\n      string += skill.name + (index < skillsArray.length - 1 ? ' â€¢\\u00A0' : ' ')\n    ))\n\n    return string;\n  }\n\n  // Set strings for each type of skill by calling method\n  let languages = arrayToString(languageSkills);\n  let SDs = arrayToString(SDSkills);\n  let frameworks = arrayToString(frameworkSkills);\n  let agiles = arrayToString(agileSkills);\n\n  const classes = useStyles();\n\n  // Create arrays for the strings of skills, titles, and icons to iterate over and show in boxes\n  let skills = [languages, frameworks, agiles];\n  let titles = [\"Languages\", \"Web Frameworks\",  \"Agile Scrum\"];\n  let icons = [\n    <Code fontSize=\"large\" className={classes.icon} />,\n    <Web fontSize=\"large\" className={classes.icon} />,\n    <ViewColumn fontSize=\"large\" className={classes.icon} />,\n    <Timeline fontSize=\"large\" className={classes.icon} />,\n  ]\n\n  return (\n\n      <section>\n        <Paper>\n          <Container maxWidth=\"md\" >\n            <Box pt={6} pb={4}>\n              <div align=\"center\" style={{paddingBottom: \"25px\"}}>\n                <Typography variant=\"h5\" gutterBottom={true}>Skills & Expertise</Typography>\n                <hr width=\"100px\" align=\"center\"/>\n              </div>\n              <Grid container spacing={4} style={{ justifyContent: \"center\" }}>\n                {/* Iterate through the skills using map, and use index variable to display each icon and title */}\n                {skills.map((skill, id) => (\n                    <Grid key={id} item xs={12} sm={6} md={4} style={{textAlign: \"center\"}}>\n                      {icons[id]}\n                      <Typography variant=\"h6\" component=\"h3\" gutterBottom={true}>{titles[id]}</Typography>\n                      <Typography variant=\"body1\" component=\"p\">{skill}</Typography>\n                    </Grid>\n                  ))\n                }\n              </Grid>\n            </Box>\n            <Box mb={4} textAlign=\"center\">\n              <Button href=\"/education\" color=\"primary\" endIcon={<ArrowRightAlt />}>See more</Button>\n            </Box>\n          </Container>\n        </Paper>\n      </section>\n  )\n}"]},"metadata":{},"sourceType":"module"}