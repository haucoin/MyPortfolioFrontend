{"ast":null,"code":"var _jsxFileName = \"/Users/hollandaucoin/vscode-workspace/workspace-CST452/hollandaucoin/src/components/IntroductionSkills.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Container, Box, Typography, Grid, Button } from '@material-ui/core';\nimport service from '../services/SkillService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Code, Timeline, Web, Laptop, Layers, ViewColumn, ArrowRightAlt } from '@material-ui/icons';\nimport theme from '../theme/theme';\n/**\n * MyPortfolio\n * @Author Holland Aucoin\n * \n * Introduction Skills\n * @Summary This component displays an introduction to the skills gained that is shown on the home page\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  icon: {\n    marginBottom: theme.spacing(1)\n  }\n}));\nexport default function App() {\n  _s();\n\n  // Creating variables of skill lists to be filled be appropriate service call\n  const [languageSkills, setLanguages] = React.useState([]);\n  const [IDESkills, setIDEs] = React.useState([]);\n  const [SDSkills, setSD] = React.useState([]);\n  const [frameworkSkills, setFrameworks] = React.useState([]);\n  const [DPSkills, setDP] = React.useState([]);\n  const [agileSkills, setAgile] = React.useState([]); // Use useEffect method to call backend for each skill type and wait for response\n\n  useEffect(() => {\n    service.getSkillsByType(\"Languages\").then(response => {\n      setLanguages(response.data);\n    });\n    service.getSkillsByType(\"IDE\").then(response => {\n      setIDEs(response.data);\n    });\n    service.getSkillsByType(\"Software Design\").then(response => {\n      setSD(response.data);\n    });\n    service.getSkillsByType(\"Web Frameworks\").then(response => {\n      setFrameworks(response.data);\n    });\n    service.getSkillsByType(\"Design Patterns\").then(response => {\n      setDP(response.data);\n    });\n    service.getSkillsByType(\"Agile Scrum\").then(response => {\n      setAgile(response.data);\n    });\n  }, []); // Iterate through an array of technologies and turn it into string\n\n  function arrayToString(skillsArray) {\n    let string = \"\";\n    skillsArray.map((skill, index) => string += skill.name + (index < skillsArray.length - 1 ? ' â€¢\\u00A0' : ' '));\n    return string;\n  } // Set strings for each type of skill by calling method\n\n\n  let languages = arrayToString(languageSkills);\n  let IDEs = arrayToString(IDESkills);\n  let SDs = arrayToString(SDSkills);\n  let frameworks = arrayToString(frameworkSkills);\n  let DPs = arrayToString(DPSkills);\n  let agiles = arrayToString(agileSkills);\n  const classes = useStyles(); // Create arrays for the strings of skills, titles, and icons to iterate over and show in boxes\n\n  let skills = [languages, frameworks, IDEs, SDs, agiles, DPs];\n  let titles = [\"Languages\", \"Web Frameworks\", \"IDEs\", \"Software Design\", \"Agile Scrum\", \"Design Patterns\"];\n  let icons = [/*#__PURE__*/_jsxDEV(Code, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Web, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Laptop, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(ViewColumn, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Timeline, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Layers, {\n    fontSize: \"large\",\n    className: classes.icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        pt: 8,\n        pb: 4,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          align: \"center\",\n          style: {\n            paddingBottom: \"25px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"overline\",\n            children: \"Skills & Expertise\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 4,\n          style: {\n            justifyContent: \"center\"\n          },\n          children: skills.map((skill, id) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 6,\n            md: 4,\n            style: {\n              textAlign: \"center\"\n            },\n            children: [icons[id], /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              component: \"h3\",\n              gutterBottom: true,\n              children: titles[id]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              children: skill\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this)]\n          }, id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: 8,\n        textAlign: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          href: \"/education\",\n          color: \"primary\",\n          endIcon: /*#__PURE__*/_jsxDEV(ArrowRightAlt, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 64\n          }, this),\n          children: \"See more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"YM0s48pbvwnB1VLu532/bRqdCB4=\", false, function () {\n  return [useStyles];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/hollandaucoin/vscode-workspace/workspace-CST452/hollandaucoin/src/components/IntroductionSkills.js"],"names":["React","useEffect","Container","Box","Typography","Grid","Button","service","makeStyles","Code","Timeline","Web","Laptop","Layers","ViewColumn","ArrowRightAlt","theme","useStyles","icon","marginBottom","spacing","App","languageSkills","setLanguages","useState","IDESkills","setIDEs","SDSkills","setSD","frameworkSkills","setFrameworks","DPSkills","setDP","agileSkills","setAgile","getSkillsByType","then","response","data","arrayToString","skillsArray","string","map","skill","index","name","length","languages","IDEs","SDs","frameworks","DPs","agiles","classes","skills","titles","icons","paddingBottom","justifyContent","id","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Container, Box, Typography, Grid, Button } from '@material-ui/core';\nimport service from '../services/SkillService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Code, Timeline, Web, Laptop, Layers, ViewColumn, ArrowRightAlt } from '@material-ui/icons';\nimport theme from '../theme/theme';\n\n/**\n * MyPortfolio\n * @Author Holland Aucoin\n * \n * Introduction Skills\n * @Summary This component displays an introduction to the skills gained that is shown on the home page\n */\n\nconst useStyles = makeStyles(() => ({\n  icon: {\n    marginBottom: theme.spacing(1),\n  }\n}));\n\nexport default function App() {\n\n  // Creating variables of skill lists to be filled be appropriate service call\n  const [languageSkills, setLanguages] = React.useState([]);\n  const [IDESkills, setIDEs] = React.useState([]);\n  const [SDSkills, setSD] = React.useState([]);\n  const [frameworkSkills, setFrameworks] = React.useState([]);\n  const [DPSkills, setDP] = React.useState([]);\n  const [agileSkills, setAgile] = React.useState([]);\n\n  // Use useEffect method to call backend for each skill type and wait for response\n  useEffect(() => {\n    service.getSkillsByType(\"Languages\").then(response => {\n      setLanguages(response.data);\n    })\n    service.getSkillsByType(\"IDE\").then(response => {\n      setIDEs(response.data);\n    })\n    service.getSkillsByType(\"Software Design\").then(response => {\n      setSD(response.data);\n    })\n    service.getSkillsByType(\"Web Frameworks\").then(response => {\n      setFrameworks(response.data);\n    })\n    service.getSkillsByType(\"Design Patterns\").then(response => {\n      setDP(response.data);\n    })\n    service.getSkillsByType(\"Agile Scrum\").then(response => {\n      setAgile(response.data);\n    })\n  }, []);\n\n  // Iterate through an array of technologies and turn it into string\n  function arrayToString(skillsArray) {\n    let string = \"\";\n\n    skillsArray.map((skill, index) => (\n      string += skill.name + (index < skillsArray.length - 1 ? ' â€¢\\u00A0' : ' ')\n    ))\n\n    return string;\n  }\n\n  // Set strings for each type of skill by calling method\n  let languages = arrayToString(languageSkills);\n  let IDEs = arrayToString(IDESkills);\n  let SDs = arrayToString(SDSkills);\n  let frameworks = arrayToString(frameworkSkills);\n  let DPs = arrayToString(DPSkills);\n  let agiles = arrayToString(agileSkills);\n\n  const classes = useStyles();\n\n  // Create arrays for the strings of skills, titles, and icons to iterate over and show in boxes\n  let skills = [languages, frameworks, IDEs, SDs, agiles, DPs];\n  let titles = [\"Languages\", \"Web Frameworks\", \"IDEs\", \"Software Design\", \"Agile Scrum\", \"Design Patterns\"];\n  let icons = [\n    <Code fontSize=\"large\" className={classes.icon} />,\n    <Web fontSize=\"large\" className={classes.icon} />,\n    <Laptop fontSize=\"large\" className={classes.icon} />,\n    <ViewColumn fontSize=\"large\" className={classes.icon} />,\n    <Timeline fontSize=\"large\" className={classes.icon} />,\n    <Layers fontSize=\"large\" className={classes.icon} />,\n  ]\n\n  return (\n\n      <section>\n        <Container maxWidth=\"md\" >\n          <Box pt={8} pb={4}>\n            <div align=\"center\" style={{paddingBottom: \"25px\"}}>\n              {/* <Typography variant=\"h5\" gutterBottom={true}>Skills & Expertise</Typography>\n              <hr width=\"100px\" align=\"center\"/> */}\n              <Typography variant=\"overline\">Skills & Expertise</Typography>\n            </div>\n            <Grid container spacing={4} style={{ justifyContent: \"center\" }}>\n              {/* Iterate through the skills using map, and use index variable to display each icon and title */}\n              {skills.map((skill, id) => (\n                  <Grid key={id} item xs={12} sm={6} md={4} style={{textAlign: \"center\"}}>\n                    {icons[id]}\n                    <Typography variant=\"h6\" component=\"h3\" gutterBottom={true}>{titles[id]}</Typography>\n                    <Typography variant=\"body1\" component=\"p\">{skill}</Typography>\n                  </Grid>\n                ))\n              }\n            </Grid>\n          </Box>\n          <Box mb={8} textAlign=\"center\">\n            <Button href=\"/education\" color=\"primary\" endIcon={<ArrowRightAlt />}>See more</Button>\n          </Box>\n        </Container>\n      </section>\n  )\n}"]},"metadata":{},"sourceType":"module"}